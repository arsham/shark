snippet test cases
tcs := map[string]struct {
	$1
}{}
for name, tc := range tcs {
	tc := tc
	t.Run(name, func(t *testing.T) {
		$2
	})
}
endsnippet

snippet dbmock
db, mock, err := sqlmock.New()
require.NoError(t, err)
defer db.Close()
defer assert.NoError(t, mock.ExpectationsWereMet(), "there were unfulfilled expectations")
$1
endsnippet

snippet random generator
func init() {
	rand.Seed(time.Now().UnixNano())
}

func randomString(count int) string {
	const runes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	b := make([]byte, count)
	for i := range b {
		b[i] = runes[rand.Intn(len(runes))]
	}
	return string(b)
}
endsnippet

snippet ppp
pp.Println($0)
endsnippet

snippet fuzz function

func Fuzz${1:funcName}(data []byte) int {
    if !${2:notInteresting} {
        return -1
    }
    if _, err := ${1:funcName}(p); err != nil {
        return 0
    }
    return 1
}
endsnippet
