" Use vim settings rather then vi.
set nocompatible                " must be first.

let with_nerd_tree = 0
let with_fzf = 1
let with_tagbar = 0
let with_setcolour = 1
let with_fugitive = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set shortmess=filnxtToOFAI
set number                      " line numbers
set relativenumber              " relative line numbers
set backspace=indent,eol,start  " allow backspace in insert mode
set history=10000                " :cmdline history
set showcmd                     " show commands at the bottom of the screen
set showmode                    " show current mode down the bottom
" set gcr=a:blinkon0              " disable cursor blink

" auto reload file if changed, need the following two
set autoread                    " reload files changed outside vim
au FileChangedShell * echo "Warning: File changed on disk"

set hidden
syntax on                       " syntax highlighting

filetype plugin on
filetype indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" au BufNewFile,BufRead *.vundle set filetype=vim

filetype off

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

if has('nvim')
    call plug#begin(stdpath('data') . '/plugged')
else
    call plug#begin('~/tmp/.vim/plugged')
endif

    "{{{ Core/System utilities }}}
        Plug 'preservim/nerdtree', Cond(with_nerd_tree, { 'on':  'NERDTreeToggle' } )
        Plug 'tiagofumo/vim-nerdtree-syntax-highlight', Cond(with_nerd_tree)
        Plug 'Xuyuanp/nerdtree-git-plugin', Cond(with_nerd_tree)
        Plug 'vim-scripts/LargeFile'              " enhances opening very large files
        Plug 'vimwiki/vimwiki'
        " Plug 'romainl/vim-qf'                     " quicklist/locallist manager
        Plug 'itchyny/vim-qfedit'                 " it's simplified version that only can delete stuff

    "{{{ SQL }}}
        Plug 'joereynolds/SQHell.vim'
        " Plug 'vim-scripts/SQLUtilities'  " requires the align plugin below
        " Plug 'vim-scripts/Align'       " conflicts with table mode pluing

    "{{{ git }}}
        Plug 'tpope/vim-fugitive', Cond(with_fugitive)
        Plug 'airblade/vim-gitgutter'
        "Plug 'mattn/gist-vim'

    "{{{ Visuals }}}
        Plug 'fatih/molokai'
        Plug 'sonph/onehalf', {'rtp': 'vim'}
        Plug 'ryanoasis/vim-devicons'                          " awesome icons
        Plug 'adelarsq/vim-devicons-emoji'
        "Plug 'adelarsq/vim-emoji-icon-theme'
        Plug 'fmoralesc/molokayo'
        Plug 'mhartington/oceanic-next'
        Plug 'joshdick/onedark.vim'
        Plug 'vim-airline/vim-airline'
        Plug 'vim-airline/vim-airline-themes'
        Plug 'edkolev/tmuxline.vim'

        Plug 'ntpeters/vim-better-whitespace'
        Plug 'jiangmiao/auto-pairs'
        Plug 'vim-scripts/CursorLineCurrentWindow'             " This plugin avoids the clutter of multiple highlighted screen lines with split windows by disabling the 'cursorline' setting for all but the current window.
        Plug 'Yggdroot/indentLine'                             " show tabs as vertical lines
        Plug 'dhruvasagar/vim-zoom'

    "{{{ Editing }}}
        Plug 'mbbill/undotree'
        Plug 'preservim/nerdcommenter'
        "Plug 'tpope/vim-commentary'                       " see if nerdcommenter is better
        Plug 'dhruvasagar/vim-table-mode'
        Plug 'tpope/vim-repeat'                           " add support for period (.) to unsupported plugins
        " Plug 'sirver/ultisnips'                         " sometimes buggy
        " Plug 'honza/vim-snippets'
        " Plug 'mg979/vim-visual-multi', {'branch': 'master'}

    "{{{ Searching }}}
        Plug 'jremmen/vim-ripgrep'
        Plug 'junegunn/fzf', Cond(with_fzf, { 'dir': $HOME.'/.fzf', 'do': './install --all' })
        Plug 'junegunn/fzf.vim', Cond(with_fzf)
        Plug 'nvim-lua/popup.nvim', Cond(!with_fzf)
        Plug 'nvim-lua/plenary.nvim', Cond(!with_fzf)
        Plug 'nvim-telescope/telescope.nvim', Cond(!with_fzf)
        Plug 'gilsondev/searchtasks.vim'

    "{{{ Languages }}}
        " Plug 'neovim/nvim-lspconfig'
        Plug 'fatih/vim-go', { 'for': 'go' }
        Plug 'dense-analysis/ale'
        Plug 'preservim/tagbar', Cond(with_tagbar)                          " For setting up ctags
        Plug 'sheerun/vim-polyglot'
        Plug 'uarun/vim-protobuf', { 'for': 'proto' }
        Plug 'towolf/vim-helm', { 'for': 'helm' }

    "{{{ Text objects }}}

        " see https://github.com/kana/vim-textobj-user/wiki
        " Plug 'kana/vim-textobj-user'
        " Plug 'glts/vim-textobj-comment'                  " comment (c)
        " Plug 'austintaylor/vim-indentobject'
        " Plug 'kana/vim-textobj-datetime'
        " Plug 'junegunn/vim-after-object'
        " Plug 'tpope/vim-surround'
        " Plug 'kana/vim-textobj-line'
        " Plug 'bkad/CamelCaseMotion'
        " Plug 'wellle/targets.vim'

        " Plug 'coderifous/textobj-word-column.vim'      " this is useful, but conflicts with the comments.
        " Plug 'lucapette/vim-textobj-underscore'       " this is a slow startup plugin

    "{{{ Misc }}}
        " Plug 'christoomey/vim-tmux-navigator'
        " https://github.com/kana/vim-submode
        " https://github.com/kana/vim-operator-user

call plug#end()
filetype plugin indent on                              " required

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Important Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set undolevels=10000
set ttyfast
set clipboard+=unnamed
let mapleader = " "
nnoremap g; g;zz
set title

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo') && isdirectory(expand('~').'/tmp/.vim/backups')
    silent !mkdir ~/tmp/.vim/backups > /dev/null 2>&1
    set undodir=~/tmp/.vim/backups
    set undofile
endif

